
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000468  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800122  00800122  0000051e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6e  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000929  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b9  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000024a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057e  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bf  00000000  00000000  00002c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000031c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_18>
  4c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 36       	cpi	r26, 0x67	; 103
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 16 01 	call	0x22c	; 0x22c <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 c0 01 	call	0x380	; 0x380 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_1s();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8c 7f       	andi	r24, 0xFC	; 252
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/

ISR(TIMER1_OVF_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	1f 93       	push	r17
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <__vector_13+0x2a>
 102:	00 d0       	rcall	.+0      	; 0x104 <__vector_13+0x2c>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
    static uint8_t addr = 0x5c;         // I2C slave address (57, 5c, 68)
    uint8_t result = 1;                 // ACK result from the bus         
    uint8_t temp_int = 0;
    uint8_t temp_frac = 0;
    uint8_t checksum = 0;
    char uart_string_int[2] = "00";         // String for converting numbers by itoa()
 108:	80 e3       	ldi	r24, 0x30	; 48
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	9a 83       	std	Y+2, r25	; 0x02
 10e:	89 83       	std	Y+1, r24	; 0x01
    char uart_string_frac[2] = "00";         // String for converting numbers by itoa()
 110:	9c 83       	std	Y+4, r25	; 0x04
 112:	8b 83       	std	Y+3, r24	; 0x03
    
    switch (state)
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	81 f1       	breq	.+96     	; 0x17c <__vector_13+0xa4>
 11c:	28 f4       	brcc	.+10     	; 0x128 <__vector_13+0x50>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	59 f0       	breq	.+22     	; 0x138 <__vector_13+0x60>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	c9 f0       	breq	.+50     	; 0x158 <__vector_13+0x80>
 126:	67 c0       	rjmp	.+206    	; 0x1f6 <__vector_13+0x11e>
 128:	85 30       	cpi	r24, 0x05	; 5
 12a:	09 f4       	brne	.+2      	; 0x12e <__vector_13+0x56>
 12c:	42 c0       	rjmp	.+132    	; 0x1b2 <__vector_13+0xda>
 12e:	d8 f1       	brcs	.+118    	; 0x1a6 <__vector_13+0xce>
 130:	86 30       	cpi	r24, 0x06	; 6
 132:	09 f4       	brne	.+2      	; 0x136 <__vector_13+0x5e>
 134:	44 c0       	rjmp	.+136    	; 0x1be <__vector_13+0xe6>
 136:	5f c0       	rjmp	.+190    	; 0x1f6 <__vector_13+0x11e>
    {
        // Increment I2C slave address
    case STATE_IDLE:
    result = twi_start((addr<<1) + TWI_WRITE);
 138:	88 eb       	ldi	r24, 0xB8	; 184
 13a:	0e 94 25 01 	call	0x24a	; 0x24a <twi_start>
 13e:	18 2f       	mov	r17, r24
    twi_stop();
 140:	0e 94 64 01 	call	0x2c8	; 0x2c8 <twi_stop>
    // Test result from I2C bus. If it is 0 then move to ACK state,
    // otherwise move to IDLE
    if(result == 0){
 144:	11 11       	cpse	r17, r1
 146:	04 c0       	rjmp	.+8      	; 0x150 <__vector_13+0x78>
        state = STATE_WRITE;
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 14e:	56 c0       	rjmp	.+172    	; 0x1fc <__vector_13+0x124>
    }
    else{
        state = STATE_IDLE;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 156:	52 c0       	rjmp	.+164    	; 0x1fc <__vector_13+0x124>
    }
    break;
    
    // Transmit I2C slave address and get result
    case STATE_WRITE:
    twi_write(0x02);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 43 01 	call	0x286	; 0x286 <twi_write>
    result = twi_start((addr<<1) + TWI_READ);
 15e:	89 eb       	ldi	r24, 0xB9	; 185
 160:	0e 94 25 01 	call	0x24a	; 0x24a <twi_start>
 164:	18 2f       	mov	r17, r24
    twi_stop();
 166:	0e 94 64 01 	call	0x2c8	; 0x2c8 <twi_stop>
    if(result == 0){
 16a:	11 11       	cpse	r17, r1
 16c:	04 c0       	rjmp	.+8      	; 0x176 <__vector_13+0x9e>
        state = STATE_READ_int;
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 174:	03 c0       	rjmp	.+6      	; 0x17c <__vector_13+0xa4>
    }
    else{
        state = STATE_IDLE;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    }
    
    case STATE_READ_int:
    temp_int = twi_read_ack();
 17c:	0e 94 4e 01 	call	0x29c	; 0x29c <twi_read_ack>
    twi_write(0x03);
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	0e 94 43 01 	call	0x286	; 0x286 <twi_write>
    result = twi_start((addr<<1) + TWI_READ);
 186:	89 eb       	ldi	r24, 0xB9	; 185
 188:	0e 94 25 01 	call	0x24a	; 0x24a <twi_start>
 18c:	18 2f       	mov	r17, r24
    twi_stop();
 18e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <twi_stop>
    if(result == 0){
 192:	11 11       	cpse	r17, r1
 194:	04 c0       	rjmp	.+8      	; 0x19e <__vector_13+0xc6>
        state = STATE_READ_frac;
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 19c:	2f c0       	rjmp	.+94     	; 0x1fc <__vector_13+0x124>
    }
    else{
        state = STATE_IDLE;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1a4:	2b c0       	rjmp	.+86     	; 0x1fc <__vector_13+0x124>
    }
    break;
    
    case STATE_READ_frac:
    temp_frac = twi_read_ack();
 1a6:	0e 94 4e 01 	call	0x29c	; 0x29c <twi_read_ack>
    state = STATE_READ_checksum;
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    break;
 1b0:	25 c0       	rjmp	.+74     	; 0x1fc <__vector_13+0x124>
    
    case STATE_READ_checksum:
    checksum = twi_read_nack();
 1b2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <twi_read_nack>
    state = STATE_UART;
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    break;
 1bc:	1f c0       	rjmp	.+62     	; 0x1fc <__vector_13+0x124>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1be:	4a e0       	ldi	r20, 0x0A	; 10
 1c0:	be 01       	movw	r22, r28
 1c2:	6f 5f       	subi	r22, 0xFF	; 255
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__itoa_ncheck>
 1ce:	4a e0       	ldi	r20, 0x0A	; 10
 1d0:	be 01       	movw	r22, r28
 1d2:	6d 5f       	subi	r22, 0xFD	; 253
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__itoa_ncheck>
    
    case STATE_UART:
    itoa(temp_int, uart_string_int, 10);
    itoa(temp_frac, uart_string_frac, 10);
    uart_puts(uart_string_int);
 1de:	ce 01       	movw	r24, r28
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <uart_puts>
    uart_puts(",");
 1e6:	8f e1       	ldi	r24, 0x1F	; 31
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 ee 01 	call	0x3dc	; 0x3dc <uart_puts>
    uart_puts(uart_string_frac);
 1ee:	ce 01       	movw	r24, r28
 1f0:	03 96       	adiw	r24, 0x03	; 3
 1f2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <uart_puts>
    state = STATE_IDLE;
    // If something unexpected happens then move to IDLE
    default:
    state = STATE_IDLE;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    break;
    }    
}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	1f 91       	pop	r17
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 22c:	87 b1       	in	r24, 0x07	; 7
 22e:	8f 7c       	andi	r24, 0xCF	; 207
 230:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 232:	88 b1       	in	r24, 0x08	; 8
 234:	80 63       	ori	r24, 0x30	; 48
 236:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 238:	e9 eb       	ldi	r30, 0xB9	; 185
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	8c 7f       	andi	r24, 0xFC	; 252
 240:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 242:	88 e9       	ldi	r24, 0x98	; 152
 244:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 248:	08 95       	ret

0000024a <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 24a:	94 ea       	ldi	r25, 0xA4	; 164
 24c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 250:	ec eb       	ldi	r30, 0xBC	; 188
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	90 81       	ld	r25, Z
 256:	99 23       	and	r25, r25
 258:	ec f7       	brge	.-6      	; 0x254 <twi_start+0xa>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 25a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 25e:	84 e8       	ldi	r24, 0x84	; 132
 260:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 264:	ec eb       	ldi	r30, 0xBC	; 188
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	88 23       	and	r24, r24
 26c:	ec f7       	brge	.-6      	; 0x268 <twi_start+0x1e>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 26e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 272:	98 7f       	andi	r25, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 274:	98 31       	cpi	r25, 0x18	; 24
 276:	29 f0       	breq	.+10     	; 0x282 <twi_start+0x38>
    {
        return 0;   /* Slave device accessible */
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 34       	cpi	r25, 0x40	; 64
 27c:	19 f4       	brne	.+6      	; 0x284 <twi_start+0x3a>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	08 95       	ret
 282:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 1;   /* Failed to access slave device */
    }
}
 284:	08 95       	ret

00000286 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 286:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 28a:	84 e8       	ldi	r24, 0x84	; 132
 28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 290:	ec eb       	ldi	r30, 0xBC	; 188
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	88 23       	and	r24, r24
 298:	ec f7       	brge	.-6      	; 0x294 <twi_write+0xe>
}
 29a:	08 95       	ret

0000029c <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 29c:	84 ec       	ldi	r24, 0xC4	; 196
 29e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 2a2:	ec eb       	ldi	r30, 0xBC	; 188
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 23       	and	r24, r24
 2aa:	ec f7       	brge	.-6      	; 0x2a6 <twi_read_ack+0xa>
    return (TWDR);
 2ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 2b0:	08 95       	ret

000002b2 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 2b2:	84 e8       	ldi	r24, 0x84	; 132
 2b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 2b8:	ec eb       	ldi	r30, 0xBC	; 188
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
 2c0:	ec f7       	brge	.-6      	; 0x2bc <twi_read_nack+0xa>
    return (TWDR);
 2c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 2c6:	08 95       	ret

000002c8 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 2c8:	84 e9       	ldi	r24, 0x94	; 148
 2ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2ce:	08 95       	ret

000002d0 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
 2e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2e8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2ec:	8c 71       	andi	r24, 0x1C	; 28
 2ee:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <UART_RxHead>
 2f2:	ef 5f       	subi	r30, 0xFF	; 255
 2f4:	ef 71       	andi	r30, 0x1F	; 31
 2f6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_RxTail>
 2fa:	e9 17       	cp	r30, r25
 2fc:	39 f0       	breq	.+14     	; 0x30c <__vector_18+0x3c>
 2fe:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <UART_RxHead>
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	e9 5d       	subi	r30, 0xD9	; 217
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	20 83       	st	Z, r18
 30a:	01 c0       	rjmp	.+2      	; 0x30e <__vector_18+0x3e>
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
 312:	89 2b       	or	r24, r25
 314:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__vector_19>:
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
 33e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <UART_TxHead>
 342:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <UART_TxTail>
 346:	98 17       	cp	r25, r24
 348:	69 f0       	breq	.+26     	; 0x364 <__vector_19+0x38>
 34a:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <UART_TxTail>
 34e:	ef 5f       	subi	r30, 0xFF	; 255
 350:	ef 71       	andi	r30, 0x1F	; 31
 352:	e0 93 25 01 	sts	0x0125, r30	; 0x800125 <UART_TxTail>
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	e9 5b       	subi	r30, 0xB9	; 185
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	80 81       	ld	r24, Z
 35e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 362:	05 c0       	rjmp	.+10     	; 0x36e <__vector_19+0x42>
 364:	e1 ec       	ldi	r30, 0xC1	; 193
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	8f 7d       	andi	r24, 0xDF	; 223
 36c:	80 83       	st	Z, r24
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <uart_init>:
 380:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <UART_TxHead>
 384:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <UART_TxTail>
 388:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_RxHead>
 38c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_RxTail>
 390:	99 23       	and	r25, r25
 392:	1c f4       	brge	.+6      	; 0x39a <uart_init+0x1a>
 394:	22 e0       	ldi	r18, 0x02	; 2
 396:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 39a:	90 78       	andi	r25, 0x80	; 128
 39c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 3a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 3a4:	88 e9       	ldi	r24, 0x98	; 152
 3a6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 3aa:	86 e0       	ldi	r24, 0x06	; 6
 3ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 3b0:	08 95       	ret

000003b2 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 3b2:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <UART_TxHead>
 3b6:	2f 5f       	subi	r18, 0xFF	; 255
 3b8:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 3ba:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_TxTail>
 3be:	29 17       	cp	r18, r25
 3c0:	e1 f3       	breq	.-8      	; 0x3ba <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 3c2:	e2 2f       	mov	r30, r18
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	e9 5b       	subi	r30, 0xB9	; 185
 3c8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ca:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 3cc:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 3d0:	e1 ec       	ldi	r30, 0xC1	; 193
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	80 62       	ori	r24, 0x20	; 32
 3d8:	80 83       	st	Z, r24
 3da:	08 95       	ret

000003dc <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
    while (*s)
 3e2:	88 81       	ld	r24, Y
 3e4:	88 23       	and	r24, r24
 3e6:	31 f0       	breq	.+12     	; 0x3f4 <uart_puts+0x18>
 3e8:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 3ea:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 3ee:	89 91       	ld	r24, Y+
 3f0:	81 11       	cpse	r24, r1
 3f2:	fb cf       	rjmp	.-10     	; 0x3ea <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <__itoa_ncheck>:
 3fa:	bb 27       	eor	r27, r27
 3fc:	4a 30       	cpi	r20, 0x0A	; 10
 3fe:	31 f4       	brne	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 400:	99 23       	and	r25, r25
 402:	22 f4       	brpl	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 404:	bd e2       	ldi	r27, 0x2D	; 45
 406:	90 95       	com	r25
 408:	81 95       	neg	r24
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	0c 94 09 02 	jmp	0x412	; 0x412 <__utoa_common>

00000410 <__utoa_ncheck>:
 410:	bb 27       	eor	r27, r27

00000412 <__utoa_common>:
 412:	fb 01       	movw	r30, r22
 414:	55 27       	eor	r21, r21
 416:	aa 27       	eor	r26, r26
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	aa 1f       	adc	r26, r26
 41e:	a4 17       	cp	r26, r20
 420:	10 f0       	brcs	.+4      	; 0x426 <__utoa_common+0x14>
 422:	a4 1b       	sub	r26, r20
 424:	83 95       	inc	r24
 426:	50 51       	subi	r21, 0x10	; 16
 428:	b9 f7       	brne	.-18     	; 0x418 <__utoa_common+0x6>
 42a:	a0 5d       	subi	r26, 0xD0	; 208
 42c:	aa 33       	cpi	r26, 0x3A	; 58
 42e:	08 f0       	brcs	.+2      	; 0x432 <__utoa_common+0x20>
 430:	a9 5d       	subi	r26, 0xD9	; 217
 432:	a1 93       	st	Z+, r26
 434:	00 97       	sbiw	r24, 0x00	; 0
 436:	79 f7       	brne	.-34     	; 0x416 <__utoa_common+0x4>
 438:	b1 11       	cpse	r27, r1
 43a:	b1 93       	st	Z+, r27
 43c:	11 92       	st	Z+, r1
 43e:	cb 01       	movw	r24, r22
 440:	0c 94 22 02 	jmp	0x444	; 0x444 <strrev>

00000444 <strrev>:
 444:	dc 01       	movw	r26, r24
 446:	fc 01       	movw	r30, r24
 448:	67 2f       	mov	r22, r23
 44a:	71 91       	ld	r23, Z+
 44c:	77 23       	and	r23, r23
 44e:	e1 f7       	brne	.-8      	; 0x448 <strrev+0x4>
 450:	32 97       	sbiw	r30, 0x02	; 2
 452:	04 c0       	rjmp	.+8      	; 0x45c <strrev+0x18>
 454:	7c 91       	ld	r23, X
 456:	6d 93       	st	X+, r22
 458:	70 83       	st	Z, r23
 45a:	62 91       	ld	r22, -Z
 45c:	ae 17       	cp	r26, r30
 45e:	bf 07       	cpc	r27, r31
 460:	c8 f3       	brcs	.-14     	; 0x454 <strrev+0x10>
 462:	08 95       	ret

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
