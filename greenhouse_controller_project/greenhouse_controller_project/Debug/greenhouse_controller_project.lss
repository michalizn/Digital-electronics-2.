
greenhouse_controller_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000ebe  00000f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ebe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  0080015a  0080015a  00000fac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002363  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000caa  00000000  00000000  0000352f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010fc  00000000  00000000  000041d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  000052d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d4  00000000  00000000  00005758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001487  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000074b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_18>
  4c:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 35       	cpi	r26, 0x5A	; 90
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e5       	ldi	r26, 0x5A	; 90
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3b       	cpi	r26, 0xB1	; 177
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 40 03 	call	0x680	; 0x680 <main>
  9e:	0c 94 5d 07 	jmp	0xeba	; 0xeba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include "adc_control.h"

void adc_init()
{
    // AVcc Reference
    ADMUX &= ~(1<<REFS1); ADMUX |= (1<<REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
    // Set input channel to ADC0
    ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0));
  b6:	80 81       	ld	r24, Z
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	80 83       	st	Z, r24
    // Enable ADC Module
    ADCSRA |= (1<<ADEN);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	80 83       	st	Z, r24
    // Enable Conversion Complete Interrupt
    ADCSRA |= (1<<ADIE);
  c6:	80 81       	ld	r24, Z
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	80 83       	st	Z, r24
    // Set clock prescaler to 128
    ADCSRA &= ~((1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0));
  cc:	80 81       	ld	r24, Z
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  d4:	29 9a       	sbi	0x05, 1	; 5
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <toggle_e+0x4>
  dc:	00 00       	nop
  de:	29 98       	cbi	0x05, 1	; 5
  e0:	08 95       	ret

000000e2 <lcd_write>:
  e2:	cf 93       	push	r28
  e4:	c8 2f       	mov	r28, r24
  e6:	66 23       	and	r22, r22
  e8:	11 f0       	breq	.+4      	; 0xee <lcd_write+0xc>
  ea:	28 9a       	sbi	0x05, 0	; 5
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <lcd_write+0xe>
  ee:	28 98       	cbi	0x05, 0	; 5
  f0:	54 9a       	sbi	0x0a, 4	; 10
  f2:	55 9a       	sbi	0x0a, 5	; 10
  f4:	56 9a       	sbi	0x0a, 6	; 10
  f6:	57 9a       	sbi	0x0a, 7	; 10
  f8:	5f 98       	cbi	0x0b, 7	; 11
  fa:	5e 98       	cbi	0x0b, 6	; 11
  fc:	5d 98       	cbi	0x0b, 5	; 11
  fe:	5c 98       	cbi	0x0b, 4	; 11
 100:	cc 23       	and	r28, r28
 102:	0c f4       	brge	.+2      	; 0x106 <lcd_write+0x24>
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	c6 fd       	sbrc	r28, 6
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	c5 fd       	sbrc	r28, 5
 10c:	5d 9a       	sbi	0x0b, 5	; 11
 10e:	c4 fd       	sbrc	r28, 4
 110:	5c 9a       	sbi	0x0b, 4	; 11
 112:	0e 94 6a 00 	call	0xd4	; 0xd4 <toggle_e>
 116:	5f 98       	cbi	0x0b, 7	; 11
 118:	5e 98       	cbi	0x0b, 6	; 11
 11a:	5d 98       	cbi	0x0b, 5	; 11
 11c:	5c 98       	cbi	0x0b, 4	; 11
 11e:	c3 fd       	sbrc	r28, 3
 120:	5f 9a       	sbi	0x0b, 7	; 11
 122:	c2 fd       	sbrc	r28, 2
 124:	5e 9a       	sbi	0x0b, 6	; 11
 126:	c1 fd       	sbrc	r28, 1
 128:	5d 9a       	sbi	0x0b, 5	; 11
 12a:	c0 fd       	sbrc	r28, 0
 12c:	5c 9a       	sbi	0x0b, 4	; 11
 12e:	0e 94 6a 00 	call	0xd4	; 0xd4 <toggle_e>
 132:	5c 9a       	sbi	0x0b, 4	; 11
 134:	5d 9a       	sbi	0x0b, 5	; 11
 136:	5e 9a       	sbi	0x0b, 6	; 11
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_write+0x5c>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_write+0x62>
 144:	00 00       	nop
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_command>:
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write>
 150:	08 95       	ret

00000152 <lcd_gotoxy>:
 152:	61 11       	cpse	r22, r1
 154:	04 c0       	rjmp	.+8      	; 0x15e <lcd_gotoxy+0xc>
 156:	80 58       	subi	r24, 0x80	; 128
 158:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 15c:	08 95       	ret
 15e:	80 54       	subi	r24, 0x40	; 64
 160:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 164:	08 95       	ret

00000166 <lcd_clrscr>:
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 16c:	08 95       	ret

0000016e <lcd_putc>:
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write>
 174:	08 95       	ret

00000176 <lcd_puts>:
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	29 f0       	breq	.+10     	; 0x190 <lcd_puts+0x1a>
 186:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_putc>
 18a:	89 91       	ld	r24, Y+
 18c:	81 11       	cpse	r24, r1
 18e:	fb cf       	rjmp	.-10     	; 0x186 <lcd_puts+0x10>
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 196:	cf 93       	push	r28
 198:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 19a:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 19c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 19e:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1a0:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1a2:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1a4:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1a6:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	99 ef       	ldi	r25, 0xF9	; 249
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0x16>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_init+0x1c>
 1b2:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1b4:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1b6:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 1b8:	0e 94 6a 00 	call	0xd4	; 0xd4 <toggle_e>
 1bc:	8f e1       	ldi	r24, 0x1F	; 31
 1be:	9e e4       	ldi	r25, 0x4E	; 78
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x2a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_init+0x30>
 1c6:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <toggle_e>
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x3a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init+0x40>
 1d6:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1d8:	0e 94 6a 00 	call	0xd4	; 0xd4 <toggle_e>
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x4a>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init+0x50>
 1e6:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1e8:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1ea:	0e 94 6a 00 	call	0xd4	; 0xd4 <toggle_e>
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0x5c>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_init+0x62>
 1f8:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 200:	88 e0       	ldi	r24, 0x08	; 8
 202:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 206:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 20a:	86 e0       	ldi	r24, 0x06	; 6
 20c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 210:	8c 2f       	mov	r24, r28
 212:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
}/* lcd_init */
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <lcd_main_menu>:
#include "lcd_definitions.h"
#include "lcd.h"
#include <stdlib.h>

void lcd_main_menu(uint8_t humidity_integer, uint8_t temperature_integer, uint8_t soil_humidity, uint8_t light_level)
{
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	64 97       	sbiw	r28, 0x14	; 20
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
 234:	f6 2e       	mov	r15, r22
 236:	04 2f       	mov	r16, r20
 238:	12 2f       	mov	r17, r18
    char lcd_hum_int[] = "0000";
 23a:	95 e0       	ldi	r25, 0x05	; 5
 23c:	e5 e1       	ldi	r30, 0x15	; 21
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	de 01       	movw	r26, r28
 242:	11 96       	adiw	r26, 0x01	; 1
 244:	01 90       	ld	r0, Z+
 246:	0d 92       	st	X+, r0
 248:	9a 95       	dec	r25
 24a:	e1 f7       	brne	.-8      	; 0x244 <lcd_main_menu+0x2a>
    char lcd_temp_int[] = "0000";
 24c:	95 e0       	ldi	r25, 0x05	; 5
 24e:	e5 e1       	ldi	r30, 0x15	; 21
 250:	f1 e0       	ldi	r31, 0x01	; 1
 252:	de 01       	movw	r26, r28
 254:	16 96       	adiw	r26, 0x06	; 6
 256:	01 90       	ld	r0, Z+
 258:	0d 92       	st	X+, r0
 25a:	9a 95       	dec	r25
 25c:	e1 f7       	brne	.-8      	; 0x256 <lcd_main_menu+0x3c>
    char lcd_soil_hum[] = "0000";
 25e:	95 e0       	ldi	r25, 0x05	; 5
 260:	e5 e1       	ldi	r30, 0x15	; 21
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	de 01       	movw	r26, r28
 266:	1b 96       	adiw	r26, 0x0b	; 11
 268:	01 90       	ld	r0, Z+
 26a:	0d 92       	st	X+, r0
 26c:	9a 95       	dec	r25
 26e:	e1 f7       	brne	.-8      	; 0x268 <lcd_main_menu+0x4e>
    char lcd_light_level[] = "0000";
 270:	95 e0       	ldi	r25, 0x05	; 5
 272:	e5 e1       	ldi	r30, 0x15	; 21
 274:	f1 e0       	ldi	r31, 0x01	; 1
 276:	de 01       	movw	r26, r28
 278:	50 96       	adiw	r26, 0x10	; 16
 27a:	01 90       	ld	r0, Z+
 27c:	0d 92       	st	X+, r0
 27e:	9a 95       	dec	r25
 280:	e1 f7       	brne	.-8      	; 0x27a <lcd_main_menu+0x60>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 282:	4a e0       	ldi	r20, 0x0A	; 10
 284:	be 01       	movw	r22, r28
 286:	6f 5f       	subi	r22, 0xFF	; 255
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
 290:	4a e0       	ldi	r20, 0x0A	; 10
 292:	be 01       	movw	r22, r28
 294:	6a 5f       	subi	r22, 0xFA	; 250
 296:	7f 4f       	sbci	r23, 0xFF	; 255
 298:	8f 2d       	mov	r24, r15
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
 2a0:	4a e0       	ldi	r20, 0x0A	; 10
 2a2:	be 01       	movw	r22, r28
 2a4:	65 5f       	subi	r22, 0xF5	; 245
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	80 2f       	mov	r24, r16
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
 2b0:	4a e0       	ldi	r20, 0x0A	; 10
 2b2:	be 01       	movw	r22, r28
 2b4:	60 5f       	subi	r22, 0xF0	; 240
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255
 2b8:	81 2f       	mov	r24, r17
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
    itoa(humidity_integer, lcd_hum_int, 10);
    itoa(temperature_integer, lcd_temp_int, 10);
    itoa(soil_humidity, lcd_soil_hum, 10);
    itoa(light_level, lcd_light_level, 10);
    
    lcd_gotoxy(0,0);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("AH:");
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_hum_int);
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("%");
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_gotoxy(8,0);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("SM:");
 2e8:	87 e0       	ldi	r24, 0x07	; 7
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_soil_hum);
 2f0:	ce 01       	movw	r24, r28
 2f2:	0b 96       	adiw	r24, 0x0b	; 11
 2f4:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("%");
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_gotoxy(0,1);
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("AT:");
 308:	8b e0       	ldi	r24, 0x0B	; 11
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_temp_int);
 310:	ce 01       	movw	r24, r28
 312:	06 96       	adiw	r24, 0x06	; 6
 314:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("C");
 318:	8f e0       	ldi	r24, 0x0F	; 15
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_gotoxy(8,1);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	88 e0       	ldi	r24, 0x08	; 8
 324:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("LL:");
 328:	81 e1       	ldi	r24, 0x11	; 17
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_light_level);
 330:	ce 01       	movw	r24, r28
 332:	40 96       	adiw	r24, 0x10	; 16
 334:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("%");
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
};
 340:	64 96       	adiw	r28, 0x14	; 20
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	08 95       	ret

00000358 <lcd_humidity_menu>:

void lcd_humidity_menu(uint8_t humidity_integer, uint8_t humidity_fractional, uint8_t humidity_limit)
{
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	2f 97       	sbiw	r28, 0x0f	; 15
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	06 2f       	mov	r16, r22
 372:	14 2f       	mov	r17, r20
    char lcd_hum_int[] = "0000";
 374:	95 e0       	ldi	r25, 0x05	; 5
 376:	e5 e1       	ldi	r30, 0x15	; 21
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	de 01       	movw	r26, r28
 37c:	11 96       	adiw	r26, 0x01	; 1
 37e:	01 90       	ld	r0, Z+
 380:	0d 92       	st	X+, r0
 382:	9a 95       	dec	r25
 384:	e1 f7       	brne	.-8      	; 0x37e <lcd_humidity_menu+0x26>
    char lcd_hum_frac[] = "0000";    
 386:	95 e0       	ldi	r25, 0x05	; 5
 388:	e5 e1       	ldi	r30, 0x15	; 21
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	de 01       	movw	r26, r28
 38e:	16 96       	adiw	r26, 0x06	; 6
 390:	01 90       	ld	r0, Z+
 392:	0d 92       	st	X+, r0
 394:	9a 95       	dec	r25
 396:	e1 f7       	brne	.-8      	; 0x390 <lcd_humidity_menu+0x38>
    char lcd_hum_limit[] = "0000";
 398:	95 e0       	ldi	r25, 0x05	; 5
 39a:	e5 e1       	ldi	r30, 0x15	; 21
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	de 01       	movw	r26, r28
 3a0:	1b 96       	adiw	r26, 0x0b	; 11
 3a2:	01 90       	ld	r0, Z+
 3a4:	0d 92       	st	X+, r0
 3a6:	9a 95       	dec	r25
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <lcd_humidity_menu+0x4a>
 3aa:	4a e0       	ldi	r20, 0x0A	; 10
 3ac:	be 01       	movw	r22, r28
 3ae:	6f 5f       	subi	r22, 0xFF	; 255
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
 3b8:	4a e0       	ldi	r20, 0x0A	; 10
 3ba:	be 01       	movw	r22, r28
 3bc:	6a 5f       	subi	r22, 0xFA	; 250
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	80 2f       	mov	r24, r16
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
 3c8:	4a e0       	ldi	r20, 0x0A	; 10
 3ca:	be 01       	movw	r22, r28
 3cc:	65 5f       	subi	r22, 0xF5	; 245
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	81 2f       	mov	r24, r17
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
    
    itoa(humidity_integer, lcd_hum_int, 10);
    itoa(humidity_fractional, lcd_hum_frac, 10);
    itoa(humidity_limit, lcd_hum_limit, 10);
    
    lcd_gotoxy(0,0);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("Air Hum.: ");
 3e0:	8a e1       	ldi	r24, 0x1A	; 26
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_hum_int);
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(".");
 3f0:	88 e5       	ldi	r24, 0x58	; 88
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_hum_frac);
 3f8:	ce 01       	movw	r24, r28
 3fa:	06 96       	adiw	r24, 0x06	; 6
 3fc:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("%");
 400:	85 e0       	ldi	r24, 0x05	; 5
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_gotoxy(0,1);
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("Nominal: ");
 410:	85 e2       	ldi	r24, 0x25	; 37
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_hum_limit);
 418:	ce 01       	movw	r24, r28
 41a:	0b 96       	adiw	r24, 0x0b	; 11
 41c:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("%");
 420:	85 e0       	ldi	r24, 0x05	; 5
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
};
 428:	2f 96       	adiw	r28, 0x0f	; 15
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	08 95       	ret

0000043e <lcd_temperature_menu>:

void lcd_temperature_menu(uint8_t temperature_integer, uint8_t temperature_fractional, uint8_t temperature_limit)
{
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	2f 97       	sbiw	r28, 0x0f	; 15
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	06 2f       	mov	r16, r22
 458:	14 2f       	mov	r17, r20
    char lcd_temp_int[] = "0000";
 45a:	95 e0       	ldi	r25, 0x05	; 5
 45c:	e5 e1       	ldi	r30, 0x15	; 21
 45e:	f1 e0       	ldi	r31, 0x01	; 1
 460:	de 01       	movw	r26, r28
 462:	11 96       	adiw	r26, 0x01	; 1
 464:	01 90       	ld	r0, Z+
 466:	0d 92       	st	X+, r0
 468:	9a 95       	dec	r25
 46a:	e1 f7       	brne	.-8      	; 0x464 <lcd_temperature_menu+0x26>
    char lcd_temp_frac[] = "0000";
 46c:	95 e0       	ldi	r25, 0x05	; 5
 46e:	e5 e1       	ldi	r30, 0x15	; 21
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	de 01       	movw	r26, r28
 474:	16 96       	adiw	r26, 0x06	; 6
 476:	01 90       	ld	r0, Z+
 478:	0d 92       	st	X+, r0
 47a:	9a 95       	dec	r25
 47c:	e1 f7       	brne	.-8      	; 0x476 <lcd_temperature_menu+0x38>
    char lcd_temp_limit[] = "0000";
 47e:	95 e0       	ldi	r25, 0x05	; 5
 480:	e5 e1       	ldi	r30, 0x15	; 21
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	de 01       	movw	r26, r28
 486:	1b 96       	adiw	r26, 0x0b	; 11
 488:	01 90       	ld	r0, Z+
 48a:	0d 92       	st	X+, r0
 48c:	9a 95       	dec	r25
 48e:	e1 f7       	brne	.-8      	; 0x488 <lcd_temperature_menu+0x4a>
 490:	4a e0       	ldi	r20, 0x0A	; 10
 492:	be 01       	movw	r22, r28
 494:	6f 5f       	subi	r22, 0xFF	; 255
 496:	7f 4f       	sbci	r23, 0xFF	; 255
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
 49e:	4a e0       	ldi	r20, 0x0A	; 10
 4a0:	be 01       	movw	r22, r28
 4a2:	6a 5f       	subi	r22, 0xFA	; 250
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	80 2f       	mov	r24, r16
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
 4ae:	4a e0       	ldi	r20, 0x0A	; 10
 4b0:	be 01       	movw	r22, r28
 4b2:	65 5f       	subi	r22, 0xF5	; 245
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	81 2f       	mov	r24, r17
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
    
    itoa(temperature_integer, lcd_temp_int, 10);
    itoa(temperature_fractional, lcd_temp_frac, 10);
    itoa(temperature_limit, lcd_temp_limit, 10);
    
    lcd_gotoxy(0,0);
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("Air Temp.: ");
 4c6:	8f e2       	ldi	r24, 0x2F	; 47
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_temp_int);
 4ce:	ce 01       	movw	r24, r28
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(".");
 4d6:	88 e5       	ldi	r24, 0x58	; 88
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_temp_frac);
 4de:	ce 01       	movw	r24, r28
 4e0:	06 96       	adiw	r24, 0x06	; 6
 4e2:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("C");
 4e6:	8f e0       	ldi	r24, 0x0F	; 15
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_gotoxy(0,1);
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("Nominal: ");
 4f6:	85 e2       	ldi	r24, 0x25	; 37
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_temp_limit);
 4fe:	ce 01       	movw	r24, r28
 500:	0b 96       	adiw	r24, 0x0b	; 11
 502:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("%");
 506:	85 e0       	ldi	r24, 0x05	; 5
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
};
 50e:	2f 96       	adiw	r28, 0x0f	; 15
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	08 95       	ret

00000524 <lcd_soil_humidity_menu>:

void lcd_soil_humidity_menu(uint8_t soil_humidity, uint8_t soil_humidity_limit)
{
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
 52e:	2a 97       	sbiw	r28, 0x0a	; 10
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	16 2f       	mov	r17, r22
    char lcd_soil_hum_int[] = "0000";
 53c:	95 e0       	ldi	r25, 0x05	; 5
 53e:	e5 e1       	ldi	r30, 0x15	; 21
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	de 01       	movw	r26, r28
 544:	11 96       	adiw	r26, 0x01	; 1
 546:	01 90       	ld	r0, Z+
 548:	0d 92       	st	X+, r0
 54a:	9a 95       	dec	r25
 54c:	e1 f7       	brne	.-8      	; 0x546 <lcd_soil_humidity_menu+0x22>
    char lcd_soil_hum_limit[] = "0000";
 54e:	95 e0       	ldi	r25, 0x05	; 5
 550:	e5 e1       	ldi	r30, 0x15	; 21
 552:	f1 e0       	ldi	r31, 0x01	; 1
 554:	de 01       	movw	r26, r28
 556:	16 96       	adiw	r26, 0x06	; 6
 558:	01 90       	ld	r0, Z+
 55a:	0d 92       	st	X+, r0
 55c:	9a 95       	dec	r25
 55e:	e1 f7       	brne	.-8      	; 0x558 <lcd_soil_humidity_menu+0x34>
 560:	4a e0       	ldi	r20, 0x0A	; 10
 562:	be 01       	movw	r22, r28
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
 56e:	4a e0       	ldi	r20, 0x0A	; 10
 570:	be 01       	movw	r22, r28
 572:	6a 5f       	subi	r22, 0xFA	; 250
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	81 2f       	mov	r24, r17
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
    
    itoa(soil_humidity, lcd_soil_hum_int, 10);
    itoa(soil_humidity_limit, lcd_soil_hum_limit, 10);
    
    lcd_gotoxy(0,0);
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("Soil Moist.: ");
 586:	8b e3       	ldi	r24, 0x3B	; 59
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_soil_hum_int);
 58e:	ce 01       	movw	r24, r28
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("%");
 596:	85 e0       	ldi	r24, 0x05	; 5
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_gotoxy(0,1);
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("Nominal: ");
 5a6:	85 e2       	ldi	r24, 0x25	; 37
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_soil_hum_limit);
 5ae:	ce 01       	movw	r24, r28
 5b0:	06 96       	adiw	r24, 0x06	; 6
 5b2:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("%");
 5b6:	85 e0       	ldi	r24, 0x05	; 5
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
};
 5be:	2a 96       	adiw	r28, 0x0a	; 10
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	08 95       	ret

000005d2 <lcd_light_level_menu>:

void lcd_light_level_menu(uint8_t light_level, uint8_t light_level_limit)
{
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
 5dc:	2a 97       	sbiw	r28, 0x0a	; 10
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	cd bf       	out	0x3d, r28	; 61
 5e8:	16 2f       	mov	r17, r22
    char lcd_light_level_int[] = "0000";
 5ea:	95 e0       	ldi	r25, 0x05	; 5
 5ec:	e5 e1       	ldi	r30, 0x15	; 21
 5ee:	f1 e0       	ldi	r31, 0x01	; 1
 5f0:	de 01       	movw	r26, r28
 5f2:	11 96       	adiw	r26, 0x01	; 1
 5f4:	01 90       	ld	r0, Z+
 5f6:	0d 92       	st	X+, r0
 5f8:	9a 95       	dec	r25
 5fa:	e1 f7       	brne	.-8      	; 0x5f4 <lcd_light_level_menu+0x22>
    char lcd_light_level_limit[] = "0000";
 5fc:	95 e0       	ldi	r25, 0x05	; 5
 5fe:	e5 e1       	ldi	r30, 0x15	; 21
 600:	f1 e0       	ldi	r31, 0x01	; 1
 602:	de 01       	movw	r26, r28
 604:	16 96       	adiw	r26, 0x06	; 6
 606:	01 90       	ld	r0, Z+
 608:	0d 92       	st	X+, r0
 60a:	9a 95       	dec	r25
 60c:	e1 f7       	brne	.-8      	; 0x606 <lcd_light_level_menu+0x34>
 60e:	4a e0       	ldi	r20, 0x0A	; 10
 610:	be 01       	movw	r22, r28
 612:	6f 5f       	subi	r22, 0xFF	; 255
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
 61c:	4a e0       	ldi	r20, 0x0A	; 10
 61e:	be 01       	movw	r22, r28
 620:	6a 5f       	subi	r22, 0xFA	; 250
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	81 2f       	mov	r24, r17
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 28 07 	call	0xe50	; 0xe50 <__itoa_ncheck>
    
    itoa(light_level, lcd_light_level_int, 10);
    itoa(light_level_limit, lcd_light_level_limit, 10);
    
    lcd_gotoxy(0,0);
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("Soil Moist.: ");
 634:	8b e3       	ldi	r24, 0x3B	; 59
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_light_level_int);
 63c:	ce 01       	movw	r24, r28
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("%");
 644:	85 e0       	ldi	r24, 0x05	; 5
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_gotoxy(0,1);
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("Nominal: ");
 654:	85 e2       	ldi	r24, 0x25	; 37
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts(lcd_light_level_limit);
 65c:	ce 01       	movw	r24, r28
 65e:	06 96       	adiw	r24, 0x06	; 6
 660:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    lcd_puts("%");
 664:	85 e0       	ldi	r24, 0x05	; 5
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
};
 66c:	2a 96       	adiw	r28, 0x0a	; 10
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	f8 94       	cli
 672:	de bf       	out	0x3e, r29	; 62
 674:	0f be       	out	0x3f, r0	; 63
 676:	cd bf       	out	0x3d, r28	; 61
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	1f 91       	pop	r17
 67e:	08 95       	ret

00000680 <main>:
} state_t;

int main(void)
{
    // Initialize
    lcd_init(LCD_DISP_ON);
 680:	8c e0       	ldi	r24, 0x0C	; 12
 682:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_init>
    twi_init();
 686:	0e 94 54 05 	call	0xaa8	; 0xaa8 <twi_init>
    adc_init();
 68a:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
    
    lcd_gotoxy(0,0);
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_gotoxy>
    lcd_puts("Initialization..");
 696:	89 e4       	ldi	r24, 0x49	; 73
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
    
    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Set prescaler to 262 ms and enable overflow interrupt
    TIM1_overflow_262ms();
 69e:	e1 e8       	ldi	r30, 0x81	; 129
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	80 81       	ld	r24, Z
 6a4:	8b 7f       	andi	r24, 0xFB	; 251
 6a6:	80 83       	st	Z, r24
 6a8:	80 81       	ld	r24, Z
 6aa:	83 60       	ori	r24, 0x03	; 3
 6ac:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 6ae:	ef e6       	ldi	r30, 0x6F	; 111
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	81 60       	ori	r24, 0x01	; 1
 6b6:	80 83       	st	Z, r24
    
    // Configure 8-bit Timer/Counter2 to update FSM
    // Set prescaler to 16 ms and enable interrupt
    TIM2_overflow_16ms();
 6b8:	e1 eb       	ldi	r30, 0xB1	; 177
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	87 60       	ori	r24, 0x07	; 7
 6c0:	80 83       	st	Z, r24
    TIM2_overflow_interrupt_enable();
 6c2:	e0 e7       	ldi	r30, 0x70	; 112
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	81 60       	ori	r24, 0x01	; 1
 6ca:	80 83       	st	Z, r24
    
    // Enables interrupts by setting the global interrupt mask
    sei();
 6cc:	78 94       	sei

    // Infinite loop
    while (1)
    {
        lcd_main_menu(humidity_integer, temperature_integer, soil_humidity, light_level);
 6ce:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <light_level>
 6d2:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <soil_humidity>
 6d6:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <temperature_integer>
 6da:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <humidity_integer>
 6de:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_main_menu>
 6e2:	f5 cf       	rjmp	.-22     	; 0x6ce <main+0x4e>

000006e4 <__vector_13>:
    // Will never reach this
    return 0;
}

ISR(TIMER1_OVF_vect)
{
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
    twi_start((0x5c<<1) + TWI_WRITE);
 706:	88 eb       	ldi	r24, 0xB8	; 184
 708:	0e 94 63 05 	call	0xac6	; 0xac6 <twi_start>
    twi_write(0x00);
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_write>
    twi_stop();
 712:	0e 94 a2 05 	call	0xb44	; 0xb44 <twi_stop>
    twi_start((92<<1) + TWI_READ);
 716:	89 eb       	ldi	r24, 0xB9	; 185
 718:	0e 94 63 05 	call	0xac6	; 0xac6 <twi_start>
    humidity_integer = twi_read_ack();
 71c:	0e 94 8c 05 	call	0xb18	; 0xb18 <twi_read_ack>
 720:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <humidity_integer>
    humidity_fractional = twi_read_ack();
 724:	0e 94 8c 05 	call	0xb18	; 0xb18 <twi_read_ack>
 728:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <humidity_fractional>
    temperature_integer = twi_read_ack();
 72c:	0e 94 8c 05 	call	0xb18	; 0xb18 <twi_read_ack>
 730:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <temperature_integer>
    temperature_fractional = twi_read_ack();
 734:	0e 94 8c 05 	call	0xb18	; 0xb18 <twi_read_ack>
 738:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <temperature_fractional>
    checksum = twi_read_nack();
 73c:	0e 94 97 05 	call	0xb2e	; 0xb2e <twi_read_nack>
 740:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <checksum>
    twi_stop();
 744:	0e 94 a2 05 	call	0xb44	; 0xb44 <twi_stop>
}
 748:	ff 91       	pop	r31
 74a:	ef 91       	pop	r30
 74c:	bf 91       	pop	r27
 74e:	af 91       	pop	r26
 750:	9f 91       	pop	r25
 752:	8f 91       	pop	r24
 754:	7f 91       	pop	r23
 756:	6f 91       	pop	r22
 758:	5f 91       	pop	r21
 75a:	4f 91       	pop	r20
 75c:	3f 91       	pop	r19
 75e:	2f 91       	pop	r18
 760:	0f 90       	pop	r0
 762:	0f be       	out	0x3f, r0	; 63
 764:	0f 90       	pop	r0
 766:	1f 90       	pop	r1
 768:	18 95       	reti

0000076a <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 76a:	1f 92       	push	r1
 76c:	0f 92       	push	r0
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	0f 92       	push	r0
 772:	11 24       	eor	r1, r1
 774:	cf 92       	push	r12
 776:	df 92       	push	r13
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	2f 93       	push	r18
 77e:	3f 93       	push	r19
 780:	4f 93       	push	r20
 782:	5f 93       	push	r21
 784:	6f 93       	push	r22
 786:	7f 93       	push	r23
 788:	8f 93       	push	r24
 78a:	9f 93       	push	r25
 78c:	af 93       	push	r26
 78e:	bf 93       	push	r27
 790:	cf 93       	push	r28
 792:	ef 93       	push	r30
 794:	ff 93       	push	r31
    static uint8_t update = 0;
    update++;
 796:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
 79a:	8f 5f       	subi	r24, 0xFF	; 255
    
    if (update >= 50)
 79c:	82 33       	cpi	r24, 0x32	; 50
 79e:	18 f4       	brcc	.+6      	; 0x7a6 <__vector_9+0x3c>
}

ISR(TIMER2_OVF_vect)
{
    static uint8_t update = 0;
    update++;
 7a0:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 7a4:	29 c1       	rjmp	.+594    	; 0x9f8 <__stack+0xf9>
    
    if (update >= 50)
    {
        update = 0;
 7a6:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
        float frac = 100.0/1024.0;
        float soil_humidity_float = soil_humidity_raw * frac;
        float light_level_float = light_level_raw * frac;
 7aa:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <light_level_raw>
 7ae:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <light_level_raw+0x1>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 7ba:	20 e0       	ldi	r18, 0x00	; 0
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	48 ec       	ldi	r20, 0xC8	; 200
 7c0:	5d e3       	ldi	r21, 0x3D	; 61
 7c2:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 7c6:	6b 01       	movw	r12, r22
 7c8:	7c 01       	movw	r14, r24
        soil_humidity = soil_humidity_float;
 7ca:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <soil_humidity_raw>
 7ce:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <soil_humidity_raw+0x1>
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 7da:	20 e0       	ldi	r18, 0x00	; 0
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	48 ec       	ldi	r20, 0xC8	; 200
 7e0:	5d e3       	ldi	r21, 0x3D	; 61
 7e2:	0e 94 93 06 	call	0xd26	; 0xd26 <__mulsf3>
 7e6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fixunssfsi>
 7ea:	c6 2f       	mov	r28, r22
 7ec:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <soil_humidity>
        light_level = light_level_float;
 7f0:	c7 01       	movw	r24, r14
 7f2:	b6 01       	movw	r22, r12
 7f4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fixunssfsi>
 7f8:	86 2f       	mov	r24, r22
 7fa:	60 93 61 01 	sts	0x0161, r22	; 0x800161 <light_level>
        
		static state_t state = STATE_IDLE;
		
        switch (state)
 7fe:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 802:	93 30       	cpi	r25, 0x03	; 3
 804:	09 f4       	brne	.+2      	; 0x808 <__vector_9+0x9e>
 806:	5f c0       	rjmp	.+190    	; 0x8c6 <__vector_9+0x15c>
 808:	28 f4       	brcc	.+10     	; 0x814 <__vector_9+0xaa>
 80a:	91 30       	cpi	r25, 0x01	; 1
 80c:	51 f0       	breq	.+20     	; 0x822 <__vector_9+0xb8>
 80e:	92 30       	cpi	r25, 0x02	; 2
 810:	29 f1       	breq	.+74     	; 0x85c <__vector_9+0xf2>
 812:	ef c0       	rjmp	.+478    	; 0x9f2 <__stack+0xf3>
 814:	94 30       	cpi	r25, 0x04	; 4
 816:	09 f4       	brne	.+2      	; 0x81a <__vector_9+0xb0>
 818:	8b c0       	rjmp	.+278    	; 0x930 <__stack+0x31>
 81a:	95 30       	cpi	r25, 0x05	; 5
 81c:	09 f4       	brne	.+2      	; 0x820 <__vector_9+0xb6>
 81e:	b9 c0       	rjmp	.+370    	; 0x992 <__stack+0x93>
 820:	e8 c0       	rjmp	.+464    	; 0x9f2 <__stack+0xf3>
        {
        case STATE_IDLE:
            lcd_main_menu(humidity_integer, temperature_integer, soil_humidity, light_level);
 822:	26 2f       	mov	r18, r22
 824:	4c 2f       	mov	r20, r28
 826:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <temperature_integer>
 82a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <humidity_integer>
 82e:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_main_menu>
			if (button_val >= 0 && button_val < 51){
 832:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <button_val>
 836:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <button_val+0x1>
 83a:	83 33       	cpi	r24, 0x33	; 51
 83c:	91 05       	cpc	r25, r1
 83e:	20 f4       	brcc	.+8      	; 0x848 <__vector_9+0xde>
				state = STATE_HUMIDITY;
 840:	82 e0       	ldi	r24, 0x02	; 2
 842:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 846:	d8 c0       	rjmp	.+432    	; 0x9f8 <__stack+0xf9>
				}
			else if (button_val >= 325 && button_val < 527){
 848:	85 54       	subi	r24, 0x45	; 69
 84a:	91 40       	sbci	r25, 0x01	; 1
 84c:	8a 3c       	cpi	r24, 0xCA	; 202
 84e:	91 05       	cpc	r25, r1
 850:	08 f0       	brcs	.+2      	; 0x854 <__vector_9+0xea>
 852:	d2 c0       	rjmp	.+420    	; 0x9f8 <__stack+0xf9>
				state = STATE_LIGHT_LEVEL;
 854:	85 e0       	ldi	r24, 0x05	; 5
 856:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 85a:	ce c0       	rjmp	.+412    	; 0x9f8 <__stack+0xf9>
				}
            break;
        case STATE_HUMIDITY:
            lcd_humidity_menu(humidity_integer, humidity_fractional, humidity_limit);
 85c:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <humidity_limit>
 860:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <humidity_fractional>
 864:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <humidity_integer>
 868:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_humidity_menu>
			if (button_val >= 0 && button_val < 51){
 86c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <button_val>
 870:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <button_val+0x1>
 874:	83 33       	cpi	r24, 0x33	; 51
 876:	91 05       	cpc	r25, r1
 878:	20 f4       	brcc	.+8      	; 0x882 <__vector_9+0x118>
				state = STATE_TEMPERATURE;
 87a:	83 e0       	ldi	r24, 0x03	; 3
 87c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 880:	bb c0       	rjmp	.+374    	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 325 && button_val < 527){
 882:	9c 01       	movw	r18, r24
 884:	25 54       	subi	r18, 0x45	; 69
 886:	31 40       	sbci	r19, 0x01	; 1
 888:	2a 3c       	cpi	r18, 0xCA	; 202
 88a:	31 05       	cpc	r19, r1
 88c:	20 f4       	brcc	.+8      	; 0x896 <__vector_9+0x12c>
				state = STATE_IDLE;
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 894:	b1 c0       	rjmp	.+354    	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 51 && button_val < 174) {
 896:	9c 01       	movw	r18, r24
 898:	23 53       	subi	r18, 0x33	; 51
 89a:	31 09       	sbc	r19, r1
 89c:	2b 37       	cpi	r18, 0x7B	; 123
 89e:	31 05       	cpc	r19, r1
 8a0:	30 f4       	brcc	.+12     	; 0x8ae <__vector_9+0x144>
				humidity_limit++;
 8a2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <humidity_limit>
 8a6:	8f 5f       	subi	r24, 0xFF	; 255
 8a8:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <humidity_limit>
 8ac:	a5 c0       	rjmp	.+330    	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 174 && button_val < 325) {
 8ae:	8e 5a       	subi	r24, 0xAE	; 174
 8b0:	91 09       	sbc	r25, r1
 8b2:	87 39       	cpi	r24, 0x97	; 151
 8b4:	91 05       	cpc	r25, r1
 8b6:	08 f0       	brcs	.+2      	; 0x8ba <__vector_9+0x150>
 8b8:	9f c0       	rjmp	.+318    	; 0x9f8 <__stack+0xf9>
				humidity_limit--;
 8ba:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <humidity_limit>
 8be:	81 50       	subi	r24, 0x01	; 1
 8c0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <humidity_limit>
 8c4:	99 c0       	rjmp	.+306    	; 0x9f8 <__stack+0xf9>
			}
            break;
        case STATE_TEMPERATURE:
            lcd_temperature_menu(temperature_integer, temperature_fractional, temperature_limit);
 8c6:	40 91 5d 01 	lds	r20, 0x015D	; 0x80015d <temperature_limit>
 8ca:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <temperature_fractional>
 8ce:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <temperature_integer>
 8d2:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_temperature_menu>
			if (button_val >= 0 && button_val < 51){
 8d6:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <button_val>
 8da:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <button_val+0x1>
 8de:	83 33       	cpi	r24, 0x33	; 51
 8e0:	91 05       	cpc	r25, r1
 8e2:	20 f4       	brcc	.+8      	; 0x8ec <__vector_9+0x182>
				state = STATE_SOIL_HUMIDITY;
 8e4:	84 e0       	ldi	r24, 0x04	; 4
 8e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8ea:	86 c0       	rjmp	.+268    	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 325 && button_val < 527){
 8ec:	9c 01       	movw	r18, r24
 8ee:	25 54       	subi	r18, 0x45	; 69
 8f0:	31 40       	sbci	r19, 0x01	; 1
 8f2:	2a 3c       	cpi	r18, 0xCA	; 202
 8f4:	31 05       	cpc	r19, r1
 8f6:	20 f4       	brcc	.+8      	; 0x900 <__stack+0x1>
				state = STATE_HUMIDITY;
 8f8:	82 e0       	ldi	r24, 0x02	; 2
 8fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8fe:	7c c0       	rjmp	.+248    	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 51 && button_val < 174) {
 900:	9c 01       	movw	r18, r24
 902:	23 53       	subi	r18, 0x33	; 51
 904:	31 09       	sbc	r19, r1
 906:	2b 37       	cpi	r18, 0x7B	; 123
 908:	31 05       	cpc	r19, r1
 90a:	30 f4       	brcc	.+12     	; 0x918 <__stack+0x19>
				temperature_limit++;
 90c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <temperature_limit>
 910:	8f 5f       	subi	r24, 0xFF	; 255
 912:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <temperature_limit>
 916:	70 c0       	rjmp	.+224    	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 174 && button_val < 325) {
 918:	8e 5a       	subi	r24, 0xAE	; 174
 91a:	91 09       	sbc	r25, r1
 91c:	87 39       	cpi	r24, 0x97	; 151
 91e:	91 05       	cpc	r25, r1
 920:	08 f0       	brcs	.+2      	; 0x924 <__stack+0x25>
 922:	6a c0       	rjmp	.+212    	; 0x9f8 <__stack+0xf9>
				temperature_limit--;
 924:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <temperature_limit>
 928:	81 50       	subi	r24, 0x01	; 1
 92a:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <temperature_limit>
 92e:	64 c0       	rjmp	.+200    	; 0x9f8 <__stack+0xf9>
			}
            break;
        case STATE_SOIL_HUMIDITY:
            lcd_soil_humidity_menu(soil_humidity, soil_humidity_limit);
 930:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <soil_humidity_limit>
 934:	8c 2f       	mov	r24, r28
 936:	0e 94 92 02 	call	0x524	; 0x524 <lcd_soil_humidity_menu>
			if (button_val >= 0 && button_val < 51){
 93a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <button_val>
 93e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <button_val+0x1>
 942:	83 33       	cpi	r24, 0x33	; 51
 944:	91 05       	cpc	r25, r1
 946:	20 f4       	brcc	.+8      	; 0x950 <__stack+0x51>
				state = STATE_LIGHT_LEVEL;
 948:	85 e0       	ldi	r24, 0x05	; 5
 94a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 94e:	54 c0       	rjmp	.+168    	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 325 && button_val < 527){
 950:	9c 01       	movw	r18, r24
 952:	25 54       	subi	r18, 0x45	; 69
 954:	31 40       	sbci	r19, 0x01	; 1
 956:	2a 3c       	cpi	r18, 0xCA	; 202
 958:	31 05       	cpc	r19, r1
 95a:	20 f4       	brcc	.+8      	; 0x964 <__stack+0x65>
				state = STATE_TEMPERATURE;
 95c:	83 e0       	ldi	r24, 0x03	; 3
 95e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 962:	4a c0       	rjmp	.+148    	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 51 && button_val < 174) {
 964:	9c 01       	movw	r18, r24
 966:	23 53       	subi	r18, 0x33	; 51
 968:	31 09       	sbc	r19, r1
 96a:	2b 37       	cpi	r18, 0x7B	; 123
 96c:	31 05       	cpc	r19, r1
 96e:	30 f4       	brcc	.+12     	; 0x97c <__stack+0x7d>
				soil_humidity_limit++;
 970:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <soil_humidity_limit>
 974:	8f 5f       	subi	r24, 0xFF	; 255
 976:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <soil_humidity_limit>
 97a:	3e c0       	rjmp	.+124    	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 174 && button_val < 325) {
 97c:	8e 5a       	subi	r24, 0xAE	; 174
 97e:	91 09       	sbc	r25, r1
 980:	87 39       	cpi	r24, 0x97	; 151
 982:	91 05       	cpc	r25, r1
 984:	c8 f5       	brcc	.+114    	; 0x9f8 <__stack+0xf9>
				soil_humidity_limit--;
 986:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <soil_humidity_limit>
 98a:	81 50       	subi	r24, 0x01	; 1
 98c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <soil_humidity_limit>
 990:	33 c0       	rjmp	.+102    	; 0x9f8 <__stack+0xf9>
			}
            break;
        case STATE_LIGHT_LEVEL:
            lcd_light_level_menu(light_level, light_level_limit);
 992:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <light_level_limit>
 996:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_light_level_menu>
			if (button_val >= 0 && button_val < 51){
 99a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <button_val>
 99e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <button_val+0x1>
 9a2:	83 33       	cpi	r24, 0x33	; 51
 9a4:	91 05       	cpc	r25, r1
 9a6:	20 f4       	brcc	.+8      	; 0x9b0 <__stack+0xb1>
				state = STATE_IDLE;
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9ae:	24 c0       	rjmp	.+72     	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 325 && button_val < 527){
 9b0:	9c 01       	movw	r18, r24
 9b2:	25 54       	subi	r18, 0x45	; 69
 9b4:	31 40       	sbci	r19, 0x01	; 1
 9b6:	2a 3c       	cpi	r18, 0xCA	; 202
 9b8:	31 05       	cpc	r19, r1
 9ba:	20 f4       	brcc	.+8      	; 0x9c4 <__stack+0xc5>
				state = STATE_SOIL_HUMIDITY;
 9bc:	84 e0       	ldi	r24, 0x04	; 4
 9be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9c2:	1a c0       	rjmp	.+52     	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 51 && button_val < 174) {
 9c4:	9c 01       	movw	r18, r24
 9c6:	23 53       	subi	r18, 0x33	; 51
 9c8:	31 09       	sbc	r19, r1
 9ca:	2b 37       	cpi	r18, 0x7B	; 123
 9cc:	31 05       	cpc	r19, r1
 9ce:	30 f4       	brcc	.+12     	; 0x9dc <__stack+0xdd>
				light_level_limit++;
 9d0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <light_level_limit>
 9d4:	8f 5f       	subi	r24, 0xFF	; 255
 9d6:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <light_level_limit>
 9da:	0e c0       	rjmp	.+28     	; 0x9f8 <__stack+0xf9>
			}
			else if (button_val >= 174 && button_val < 325) {
 9dc:	8e 5a       	subi	r24, 0xAE	; 174
 9de:	91 09       	sbc	r25, r1
 9e0:	87 39       	cpi	r24, 0x97	; 151
 9e2:	91 05       	cpc	r25, r1
 9e4:	48 f4       	brcc	.+18     	; 0x9f8 <__stack+0xf9>
				light_level_limit--;
 9e6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <light_level_limit>
 9ea:	81 50       	subi	r24, 0x01	; 1
 9ec:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <light_level_limit>
 9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <__stack+0xf9>
			}
            break;
        default:
            state = STATE_IDLE;
 9f2:	81 e0       	ldi	r24, 0x01	; 1
 9f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
        }
    }
    
    ADCSRA |= (1<<ADSC);
 9f8:	ea e7       	ldi	r30, 0x7A	; 122
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	80 81       	ld	r24, Z
 9fe:	80 64       	ori	r24, 0x40	; 64
 a00:	80 83       	st	Z, r24
}
 a02:	ff 91       	pop	r31
 a04:	ef 91       	pop	r30
 a06:	cf 91       	pop	r28
 a08:	bf 91       	pop	r27
 a0a:	af 91       	pop	r26
 a0c:	9f 91       	pop	r25
 a0e:	8f 91       	pop	r24
 a10:	7f 91       	pop	r23
 a12:	6f 91       	pop	r22
 a14:	5f 91       	pop	r21
 a16:	4f 91       	pop	r20
 a18:	3f 91       	pop	r19
 a1a:	2f 91       	pop	r18
 a1c:	ff 90       	pop	r15
 a1e:	ef 90       	pop	r14
 a20:	df 90       	pop	r13
 a22:	cf 90       	pop	r12
 a24:	0f 90       	pop	r0
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	0f 90       	pop	r0
 a2a:	1f 90       	pop	r1
 a2c:	18 95       	reti

00000a2e <__vector_21>:

ISR(ADC_vect)
{
 a2e:	1f 92       	push	r1
 a30:	0f 92       	push	r0
 a32:	0f b6       	in	r0, 0x3f	; 63
 a34:	0f 92       	push	r0
 a36:	11 24       	eor	r1, r1
 a38:	8f 93       	push	r24
 a3a:	9f 93       	push	r25
    switch(ADMUX)
 a3c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 a40:	81 34       	cpi	r24, 0x41	; 65
 a42:	81 f0       	breq	.+32     	; 0xa64 <__vector_21+0x36>
 a44:	82 34       	cpi	r24, 0x42	; 66
 a46:	d1 f0       	breq	.+52     	; 0xa7c <__vector_21+0x4e>
 a48:	80 34       	cpi	r24, 0x40	; 64
 a4a:	21 f5       	brne	.+72     	; 0xa94 <__vector_21+0x66>
    {
        case 0x40:
        soil_humidity_raw = ADC;
 a4c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 a50:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 a54:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <soil_humidity_raw+0x1>
 a58:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <soil_humidity_raw>
        ADMUX = 0x41;
 a5c:	81 e4       	ldi	r24, 0x41	; 65
 a5e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
        break;
 a62:	1b c0       	rjmp	.+54     	; 0xa9a <__vector_21+0x6c>
        
        case 0x41:
        light_level_raw = ADC;
 a64:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 a68:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 a6c:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <light_level_raw+0x1>
 a70:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <light_level_raw>
        ADMUX = 0x42;
 a74:	82 e4       	ldi	r24, 0x42	; 66
 a76:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
        break;
 a7a:	0f c0       	rjmp	.+30     	; 0xa9a <__vector_21+0x6c>
        
        case 0x42:
        button_val = ADC;
 a7c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 a80:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 a84:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <button_val+0x1>
 a88:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <button_val>
        ADMUX = 0x40;
 a8c:	80 e4       	ldi	r24, 0x40	; 64
 a8e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
        break;
 a92:	03 c0       	rjmp	.+6      	; 0xa9a <__vector_21+0x6c>
        
        default:
        ADMUX = 0x40;
 a94:	80 e4       	ldi	r24, 0x40	; 64
 a96:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
        break;
    }
}    
 a9a:	9f 91       	pop	r25
 a9c:	8f 91       	pop	r24
 a9e:	0f 90       	pop	r0
 aa0:	0f be       	out	0x3f, r0	; 63
 aa2:	0f 90       	pop	r0
 aa4:	1f 90       	pop	r1
 aa6:	18 95       	reti

00000aa8 <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 aa8:	87 b1       	in	r24, 0x07	; 7
 aaa:	8f 7c       	andi	r24, 0xCF	; 207
 aac:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 aae:	88 b1       	in	r24, 0x08	; 8
 ab0:	80 63       	ori	r24, 0x30	; 48
 ab2:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 ab4:	e9 eb       	ldi	r30, 0xB9	; 185
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	80 81       	ld	r24, Z
 aba:	8c 7f       	andi	r24, 0xFC	; 252
 abc:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 abe:	88 e9       	ldi	r24, 0x98	; 152
 ac0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 ac4:	08 95       	ret

00000ac6 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 ac6:	94 ea       	ldi	r25, 0xA4	; 164
 ac8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 acc:	ec eb       	ldi	r30, 0xBC	; 188
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	90 81       	ld	r25, Z
 ad2:	99 23       	and	r25, r25
 ad4:	ec f7       	brge	.-6      	; 0xad0 <twi_start+0xa>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 ad6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 ada:	84 e8       	ldi	r24, 0x84	; 132
 adc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 ae0:	ec eb       	ldi	r30, 0xBC	; 188
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	88 23       	and	r24, r24
 ae8:	ec f7       	brge	.-6      	; 0xae4 <twi_start+0x1e>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 aea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 aee:	98 7f       	andi	r25, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 af0:	98 31       	cpi	r25, 0x18	; 24
 af2:	29 f0       	breq	.+10     	; 0xafe <twi_start+0x38>
    {
        return 0;   /* Slave device accessible */
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	90 34       	cpi	r25, 0x40	; 64
 af8:	19 f4       	brne	.+6      	; 0xb00 <twi_start+0x3a>
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	08 95       	ret
 afe:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 1;   /* Failed to access slave device */
    }
}
 b00:	08 95       	ret

00000b02 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 b02:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 b06:	84 e8       	ldi	r24, 0x84	; 132
 b08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 b0c:	ec eb       	ldi	r30, 0xBC	; 188
 b0e:	f0 e0       	ldi	r31, 0x00	; 0
 b10:	80 81       	ld	r24, Z
 b12:	88 23       	and	r24, r24
 b14:	ec f7       	brge	.-6      	; 0xb10 <twi_write+0xe>
}
 b16:	08 95       	ret

00000b18 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 b18:	84 ec       	ldi	r24, 0xC4	; 196
 b1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 b1e:	ec eb       	ldi	r30, 0xBC	; 188
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	80 81       	ld	r24, Z
 b24:	88 23       	and	r24, r24
 b26:	ec f7       	brge	.-6      	; 0xb22 <twi_read_ack+0xa>
    return (TWDR);
 b28:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 b2c:	08 95       	ret

00000b2e <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 b2e:	84 e8       	ldi	r24, 0x84	; 132
 b30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 b34:	ec eb       	ldi	r30, 0xBC	; 188
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	80 81       	ld	r24, Z
 b3a:	88 23       	and	r24, r24
 b3c:	ec f7       	brge	.-6      	; 0xb38 <twi_read_nack+0xa>
    return (TWDR);
 b3e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 b42:	08 95       	ret

00000b44 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 b44:	84 e9       	ldi	r24, 0x94	; 148
 b46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 b4a:	08 95       	ret

00000b4c <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 b4c:	1f 92       	push	r1
 b4e:	0f 92       	push	r0
 b50:	0f b6       	in	r0, 0x3f	; 63
 b52:	0f 92       	push	r0
 b54:	11 24       	eor	r1, r1
 b56:	2f 93       	push	r18
 b58:	8f 93       	push	r24
 b5a:	9f 93       	push	r25
 b5c:	ef 93       	push	r30
 b5e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 b60:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 b64:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 b68:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 b6a:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <UART_RxHead>
 b6e:	ef 5f       	subi	r30, 0xFF	; 255
 b70:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 b72:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <UART_RxTail>
 b76:	e9 17       	cp	r30, r25
 b78:	39 f0       	breq	.+14     	; 0xb88 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 b7a:	e0 93 6e 01 	sts	0x016E, r30	; 0x80016e <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	ef 58       	subi	r30, 0x8F	; 143
 b82:	fe 4f       	sbci	r31, 0xFE	; 254
 b84:	20 83       	st	Z, r18
 b86:	01 c0       	rjmp	.+2      	; 0xb8a <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 b88:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 b8a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <UART_LastRxError>
 b8e:	89 2b       	or	r24, r25
 b90:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <UART_LastRxError>
}
 b94:	ff 91       	pop	r31
 b96:	ef 91       	pop	r30
 b98:	9f 91       	pop	r25
 b9a:	8f 91       	pop	r24
 b9c:	2f 91       	pop	r18
 b9e:	0f 90       	pop	r0
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	0f 90       	pop	r0
 ba4:	1f 90       	pop	r1
 ba6:	18 95       	reti

00000ba8 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 ba8:	1f 92       	push	r1
 baa:	0f 92       	push	r0
 bac:	0f b6       	in	r0, 0x3f	; 63
 bae:	0f 92       	push	r0
 bb0:	11 24       	eor	r1, r1
 bb2:	8f 93       	push	r24
 bb4:	9f 93       	push	r25
 bb6:	ef 93       	push	r30
 bb8:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 bba:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <UART_TxHead>
 bbe:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <UART_TxTail>
 bc2:	98 17       	cp	r25, r24
 bc4:	69 f0       	breq	.+26     	; 0xbe0 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 bc6:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <UART_TxTail>
 bca:	ef 5f       	subi	r30, 0xFF	; 255
 bcc:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 bce:	e0 93 6f 01 	sts	0x016F, r30	; 0x80016f <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	ef 56       	subi	r30, 0x6F	; 111
 bd6:	fe 4f       	sbci	r31, 0xFE	; 254
 bd8:	80 81       	ld	r24, Z
 bda:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 bde:	05 c0       	rjmp	.+10     	; 0xbea <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 be0:	e1 ec       	ldi	r30, 0xC1	; 193
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	80 81       	ld	r24, Z
 be6:	8f 7d       	andi	r24, 0xDF	; 223
 be8:	80 83       	st	Z, r24
    }
}
 bea:	ff 91       	pop	r31
 bec:	ef 91       	pop	r30
 bee:	9f 91       	pop	r25
 bf0:	8f 91       	pop	r24
 bf2:	0f 90       	pop	r0
 bf4:	0f be       	out	0x3f, r0	; 63
 bf6:	0f 90       	pop	r0
 bf8:	1f 90       	pop	r1
 bfa:	18 95       	reti

00000bfc <__fixunssfsi>:
 bfc:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_splitA>
 c00:	88 f0       	brcs	.+34     	; 0xc24 <__fixunssfsi+0x28>
 c02:	9f 57       	subi	r25, 0x7F	; 127
 c04:	98 f0       	brcs	.+38     	; 0xc2c <__fixunssfsi+0x30>
 c06:	b9 2f       	mov	r27, r25
 c08:	99 27       	eor	r25, r25
 c0a:	b7 51       	subi	r27, 0x17	; 23
 c0c:	b0 f0       	brcs	.+44     	; 0xc3a <__fixunssfsi+0x3e>
 c0e:	e1 f0       	breq	.+56     	; 0xc48 <__fixunssfsi+0x4c>
 c10:	66 0f       	add	r22, r22
 c12:	77 1f       	adc	r23, r23
 c14:	88 1f       	adc	r24, r24
 c16:	99 1f       	adc	r25, r25
 c18:	1a f0       	brmi	.+6      	; 0xc20 <__fixunssfsi+0x24>
 c1a:	ba 95       	dec	r27
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__fixunssfsi+0x14>
 c1e:	14 c0       	rjmp	.+40     	; 0xc48 <__fixunssfsi+0x4c>
 c20:	b1 30       	cpi	r27, 0x01	; 1
 c22:	91 f0       	breq	.+36     	; 0xc48 <__fixunssfsi+0x4c>
 c24:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_zero>
 c28:	b1 e0       	ldi	r27, 0x01	; 1
 c2a:	08 95       	ret
 c2c:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_zero>
 c30:	67 2f       	mov	r22, r23
 c32:	78 2f       	mov	r23, r24
 c34:	88 27       	eor	r24, r24
 c36:	b8 5f       	subi	r27, 0xF8	; 248
 c38:	39 f0       	breq	.+14     	; 0xc48 <__fixunssfsi+0x4c>
 c3a:	b9 3f       	cpi	r27, 0xF9	; 249
 c3c:	cc f3       	brlt	.-14     	; 0xc30 <__fixunssfsi+0x34>
 c3e:	86 95       	lsr	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b3 95       	inc	r27
 c46:	d9 f7       	brne	.-10     	; 0xc3e <__fixunssfsi+0x42>
 c48:	3e f4       	brtc	.+14     	; 0xc58 <__fixunssfsi+0x5c>
 c4a:	90 95       	com	r25
 c4c:	80 95       	com	r24
 c4e:	70 95       	com	r23
 c50:	61 95       	neg	r22
 c52:	7f 4f       	sbci	r23, 0xFF	; 255
 c54:	8f 4f       	sbci	r24, 0xFF	; 255
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	08 95       	ret

00000c5a <__floatunsisf>:
 c5a:	e8 94       	clt
 c5c:	09 c0       	rjmp	.+18     	; 0xc70 <__floatsisf+0x12>

00000c5e <__floatsisf>:
 c5e:	97 fb       	bst	r25, 7
 c60:	3e f4       	brtc	.+14     	; 0xc70 <__floatsisf+0x12>
 c62:	90 95       	com	r25
 c64:	80 95       	com	r24
 c66:	70 95       	com	r23
 c68:	61 95       	neg	r22
 c6a:	7f 4f       	sbci	r23, 0xFF	; 255
 c6c:	8f 4f       	sbci	r24, 0xFF	; 255
 c6e:	9f 4f       	sbci	r25, 0xFF	; 255
 c70:	99 23       	and	r25, r25
 c72:	a9 f0       	breq	.+42     	; 0xc9e <__floatsisf+0x40>
 c74:	f9 2f       	mov	r31, r25
 c76:	96 e9       	ldi	r25, 0x96	; 150
 c78:	bb 27       	eor	r27, r27
 c7a:	93 95       	inc	r25
 c7c:	f6 95       	lsr	r31
 c7e:	87 95       	ror	r24
 c80:	77 95       	ror	r23
 c82:	67 95       	ror	r22
 c84:	b7 95       	ror	r27
 c86:	f1 11       	cpse	r31, r1
 c88:	f8 cf       	rjmp	.-16     	; 0xc7a <__floatsisf+0x1c>
 c8a:	fa f4       	brpl	.+62     	; 0xcca <__floatsisf+0x6c>
 c8c:	bb 0f       	add	r27, r27
 c8e:	11 f4       	brne	.+4      	; 0xc94 <__floatsisf+0x36>
 c90:	60 ff       	sbrs	r22, 0
 c92:	1b c0       	rjmp	.+54     	; 0xcca <__floatsisf+0x6c>
 c94:	6f 5f       	subi	r22, 0xFF	; 255
 c96:	7f 4f       	sbci	r23, 0xFF	; 255
 c98:	8f 4f       	sbci	r24, 0xFF	; 255
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	16 c0       	rjmp	.+44     	; 0xcca <__floatsisf+0x6c>
 c9e:	88 23       	and	r24, r24
 ca0:	11 f0       	breq	.+4      	; 0xca6 <__floatsisf+0x48>
 ca2:	96 e9       	ldi	r25, 0x96	; 150
 ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <__floatsisf+0x6a>
 ca6:	77 23       	and	r23, r23
 ca8:	21 f0       	breq	.+8      	; 0xcb2 <__floatsisf+0x54>
 caa:	9e e8       	ldi	r25, 0x8E	; 142
 cac:	87 2f       	mov	r24, r23
 cae:	76 2f       	mov	r23, r22
 cb0:	05 c0       	rjmp	.+10     	; 0xcbc <__floatsisf+0x5e>
 cb2:	66 23       	and	r22, r22
 cb4:	71 f0       	breq	.+28     	; 0xcd2 <__floatsisf+0x74>
 cb6:	96 e8       	ldi	r25, 0x86	; 134
 cb8:	86 2f       	mov	r24, r22
 cba:	70 e0       	ldi	r23, 0x00	; 0
 cbc:	60 e0       	ldi	r22, 0x00	; 0
 cbe:	2a f0       	brmi	.+10     	; 0xcca <__floatsisf+0x6c>
 cc0:	9a 95       	dec	r25
 cc2:	66 0f       	add	r22, r22
 cc4:	77 1f       	adc	r23, r23
 cc6:	88 1f       	adc	r24, r24
 cc8:	da f7       	brpl	.-10     	; 0xcc0 <__floatsisf+0x62>
 cca:	88 0f       	add	r24, r24
 ccc:	96 95       	lsr	r25
 cce:	87 95       	ror	r24
 cd0:	97 f9       	bld	r25, 7
 cd2:	08 95       	ret

00000cd4 <__fp_split3>:
 cd4:	57 fd       	sbrc	r21, 7
 cd6:	90 58       	subi	r25, 0x80	; 128
 cd8:	44 0f       	add	r20, r20
 cda:	55 1f       	adc	r21, r21
 cdc:	59 f0       	breq	.+22     	; 0xcf4 <__fp_splitA+0x10>
 cde:	5f 3f       	cpi	r21, 0xFF	; 255
 ce0:	71 f0       	breq	.+28     	; 0xcfe <__fp_splitA+0x1a>
 ce2:	47 95       	ror	r20

00000ce4 <__fp_splitA>:
 ce4:	88 0f       	add	r24, r24
 ce6:	97 fb       	bst	r25, 7
 ce8:	99 1f       	adc	r25, r25
 cea:	61 f0       	breq	.+24     	; 0xd04 <__fp_splitA+0x20>
 cec:	9f 3f       	cpi	r25, 0xFF	; 255
 cee:	79 f0       	breq	.+30     	; 0xd0e <__fp_splitA+0x2a>
 cf0:	87 95       	ror	r24
 cf2:	08 95       	ret
 cf4:	12 16       	cp	r1, r18
 cf6:	13 06       	cpc	r1, r19
 cf8:	14 06       	cpc	r1, r20
 cfa:	55 1f       	adc	r21, r21
 cfc:	f2 cf       	rjmp	.-28     	; 0xce2 <__fp_split3+0xe>
 cfe:	46 95       	lsr	r20
 d00:	f1 df       	rcall	.-30     	; 0xce4 <__fp_splitA>
 d02:	08 c0       	rjmp	.+16     	; 0xd14 <__fp_splitA+0x30>
 d04:	16 16       	cp	r1, r22
 d06:	17 06       	cpc	r1, r23
 d08:	18 06       	cpc	r1, r24
 d0a:	99 1f       	adc	r25, r25
 d0c:	f1 cf       	rjmp	.-30     	; 0xcf0 <__fp_splitA+0xc>
 d0e:	86 95       	lsr	r24
 d10:	71 05       	cpc	r23, r1
 d12:	61 05       	cpc	r22, r1
 d14:	08 94       	sec
 d16:	08 95       	ret

00000d18 <__fp_zero>:
 d18:	e8 94       	clt

00000d1a <__fp_szero>:
 d1a:	bb 27       	eor	r27, r27
 d1c:	66 27       	eor	r22, r22
 d1e:	77 27       	eor	r23, r23
 d20:	cb 01       	movw	r24, r22
 d22:	97 f9       	bld	r25, 7
 d24:	08 95       	ret

00000d26 <__mulsf3>:
 d26:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3x>
 d2a:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_round>
 d2e:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_pscA>
 d32:	38 f0       	brcs	.+14     	; 0xd42 <__mulsf3+0x1c>
 d34:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_pscB>
 d38:	20 f0       	brcs	.+8      	; 0xd42 <__mulsf3+0x1c>
 d3a:	95 23       	and	r25, r21
 d3c:	11 f0       	breq	.+4      	; 0xd42 <__mulsf3+0x1c>
 d3e:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_inf>
 d42:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_nan>
 d46:	11 24       	eor	r1, r1
 d48:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_szero>

00000d4c <__mulsf3x>:
 d4c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fp_split3>
 d50:	70 f3       	brcs	.-36     	; 0xd2e <__mulsf3+0x8>

00000d52 <__mulsf3_pse>:
 d52:	95 9f       	mul	r25, r21
 d54:	c1 f3       	breq	.-16     	; 0xd46 <__mulsf3+0x20>
 d56:	95 0f       	add	r25, r21
 d58:	50 e0       	ldi	r21, 0x00	; 0
 d5a:	55 1f       	adc	r21, r21
 d5c:	62 9f       	mul	r22, r18
 d5e:	f0 01       	movw	r30, r0
 d60:	72 9f       	mul	r23, r18
 d62:	bb 27       	eor	r27, r27
 d64:	f0 0d       	add	r31, r0
 d66:	b1 1d       	adc	r27, r1
 d68:	63 9f       	mul	r22, r19
 d6a:	aa 27       	eor	r26, r26
 d6c:	f0 0d       	add	r31, r0
 d6e:	b1 1d       	adc	r27, r1
 d70:	aa 1f       	adc	r26, r26
 d72:	64 9f       	mul	r22, r20
 d74:	66 27       	eor	r22, r22
 d76:	b0 0d       	add	r27, r0
 d78:	a1 1d       	adc	r26, r1
 d7a:	66 1f       	adc	r22, r22
 d7c:	82 9f       	mul	r24, r18
 d7e:	22 27       	eor	r18, r18
 d80:	b0 0d       	add	r27, r0
 d82:	a1 1d       	adc	r26, r1
 d84:	62 1f       	adc	r22, r18
 d86:	73 9f       	mul	r23, r19
 d88:	b0 0d       	add	r27, r0
 d8a:	a1 1d       	adc	r26, r1
 d8c:	62 1f       	adc	r22, r18
 d8e:	83 9f       	mul	r24, r19
 d90:	a0 0d       	add	r26, r0
 d92:	61 1d       	adc	r22, r1
 d94:	22 1f       	adc	r18, r18
 d96:	74 9f       	mul	r23, r20
 d98:	33 27       	eor	r19, r19
 d9a:	a0 0d       	add	r26, r0
 d9c:	61 1d       	adc	r22, r1
 d9e:	23 1f       	adc	r18, r19
 da0:	84 9f       	mul	r24, r20
 da2:	60 0d       	add	r22, r0
 da4:	21 1d       	adc	r18, r1
 da6:	82 2f       	mov	r24, r18
 da8:	76 2f       	mov	r23, r22
 daa:	6a 2f       	mov	r22, r26
 dac:	11 24       	eor	r1, r1
 dae:	9f 57       	subi	r25, 0x7F	; 127
 db0:	50 40       	sbci	r21, 0x00	; 0
 db2:	9a f0       	brmi	.+38     	; 0xdda <__mulsf3_pse+0x88>
 db4:	f1 f0       	breq	.+60     	; 0xdf2 <__mulsf3_pse+0xa0>
 db6:	88 23       	and	r24, r24
 db8:	4a f0       	brmi	.+18     	; 0xdcc <__mulsf3_pse+0x7a>
 dba:	ee 0f       	add	r30, r30
 dbc:	ff 1f       	adc	r31, r31
 dbe:	bb 1f       	adc	r27, r27
 dc0:	66 1f       	adc	r22, r22
 dc2:	77 1f       	adc	r23, r23
 dc4:	88 1f       	adc	r24, r24
 dc6:	91 50       	subi	r25, 0x01	; 1
 dc8:	50 40       	sbci	r21, 0x00	; 0
 dca:	a9 f7       	brne	.-22     	; 0xdb6 <__mulsf3_pse+0x64>
 dcc:	9e 3f       	cpi	r25, 0xFE	; 254
 dce:	51 05       	cpc	r21, r1
 dd0:	80 f0       	brcs	.+32     	; 0xdf2 <__mulsf3_pse+0xa0>
 dd2:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_inf>
 dd6:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_szero>
 dda:	5f 3f       	cpi	r21, 0xFF	; 255
 ddc:	e4 f3       	brlt	.-8      	; 0xdd6 <__mulsf3_pse+0x84>
 dde:	98 3e       	cpi	r25, 0xE8	; 232
 de0:	d4 f3       	brlt	.-12     	; 0xdd6 <__mulsf3_pse+0x84>
 de2:	86 95       	lsr	r24
 de4:	77 95       	ror	r23
 de6:	67 95       	ror	r22
 de8:	b7 95       	ror	r27
 dea:	f7 95       	ror	r31
 dec:	e7 95       	ror	r30
 dee:	9f 5f       	subi	r25, 0xFF	; 255
 df0:	c1 f7       	brne	.-16     	; 0xde2 <__mulsf3_pse+0x90>
 df2:	fe 2b       	or	r31, r30
 df4:	88 0f       	add	r24, r24
 df6:	91 1d       	adc	r25, r1
 df8:	96 95       	lsr	r25
 dfa:	87 95       	ror	r24
 dfc:	97 f9       	bld	r25, 7
 dfe:	08 95       	ret

00000e00 <__fp_inf>:
 e00:	97 f9       	bld	r25, 7
 e02:	9f 67       	ori	r25, 0x7F	; 127
 e04:	80 e8       	ldi	r24, 0x80	; 128
 e06:	70 e0       	ldi	r23, 0x00	; 0
 e08:	60 e0       	ldi	r22, 0x00	; 0
 e0a:	08 95       	ret

00000e0c <__fp_nan>:
 e0c:	9f ef       	ldi	r25, 0xFF	; 255
 e0e:	80 ec       	ldi	r24, 0xC0	; 192
 e10:	08 95       	ret

00000e12 <__fp_pscA>:
 e12:	00 24       	eor	r0, r0
 e14:	0a 94       	dec	r0
 e16:	16 16       	cp	r1, r22
 e18:	17 06       	cpc	r1, r23
 e1a:	18 06       	cpc	r1, r24
 e1c:	09 06       	cpc	r0, r25
 e1e:	08 95       	ret

00000e20 <__fp_pscB>:
 e20:	00 24       	eor	r0, r0
 e22:	0a 94       	dec	r0
 e24:	12 16       	cp	r1, r18
 e26:	13 06       	cpc	r1, r19
 e28:	14 06       	cpc	r1, r20
 e2a:	05 06       	cpc	r0, r21
 e2c:	08 95       	ret

00000e2e <__fp_round>:
 e2e:	09 2e       	mov	r0, r25
 e30:	03 94       	inc	r0
 e32:	00 0c       	add	r0, r0
 e34:	11 f4       	brne	.+4      	; 0xe3a <__fp_round+0xc>
 e36:	88 23       	and	r24, r24
 e38:	52 f0       	brmi	.+20     	; 0xe4e <__fp_round+0x20>
 e3a:	bb 0f       	add	r27, r27
 e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fp_round+0x20>
 e3e:	bf 2b       	or	r27, r31
 e40:	11 f4       	brne	.+4      	; 0xe46 <__fp_round+0x18>
 e42:	60 ff       	sbrs	r22, 0
 e44:	04 c0       	rjmp	.+8      	; 0xe4e <__fp_round+0x20>
 e46:	6f 5f       	subi	r22, 0xFF	; 255
 e48:	7f 4f       	sbci	r23, 0xFF	; 255
 e4a:	8f 4f       	sbci	r24, 0xFF	; 255
 e4c:	9f 4f       	sbci	r25, 0xFF	; 255
 e4e:	08 95       	ret

00000e50 <__itoa_ncheck>:
 e50:	bb 27       	eor	r27, r27
 e52:	4a 30       	cpi	r20, 0x0A	; 10
 e54:	31 f4       	brne	.+12     	; 0xe62 <__itoa_ncheck+0x12>
 e56:	99 23       	and	r25, r25
 e58:	22 f4       	brpl	.+8      	; 0xe62 <__itoa_ncheck+0x12>
 e5a:	bd e2       	ldi	r27, 0x2D	; 45
 e5c:	90 95       	com	r25
 e5e:	81 95       	neg	r24
 e60:	9f 4f       	sbci	r25, 0xFF	; 255
 e62:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__utoa_common>

00000e66 <__utoa_ncheck>:
 e66:	bb 27       	eor	r27, r27

00000e68 <__utoa_common>:
 e68:	fb 01       	movw	r30, r22
 e6a:	55 27       	eor	r21, r21
 e6c:	aa 27       	eor	r26, r26
 e6e:	88 0f       	add	r24, r24
 e70:	99 1f       	adc	r25, r25
 e72:	aa 1f       	adc	r26, r26
 e74:	a4 17       	cp	r26, r20
 e76:	10 f0       	brcs	.+4      	; 0xe7c <__utoa_common+0x14>
 e78:	a4 1b       	sub	r26, r20
 e7a:	83 95       	inc	r24
 e7c:	50 51       	subi	r21, 0x10	; 16
 e7e:	b9 f7       	brne	.-18     	; 0xe6e <__utoa_common+0x6>
 e80:	a0 5d       	subi	r26, 0xD0	; 208
 e82:	aa 33       	cpi	r26, 0x3A	; 58
 e84:	08 f0       	brcs	.+2      	; 0xe88 <__utoa_common+0x20>
 e86:	a9 5d       	subi	r26, 0xD9	; 217
 e88:	a1 93       	st	Z+, r26
 e8a:	00 97       	sbiw	r24, 0x00	; 0
 e8c:	79 f7       	brne	.-34     	; 0xe6c <__utoa_common+0x4>
 e8e:	b1 11       	cpse	r27, r1
 e90:	b1 93       	st	Z+, r27
 e92:	11 92       	st	Z+, r1
 e94:	cb 01       	movw	r24, r22
 e96:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <strrev>

00000e9a <strrev>:
 e9a:	dc 01       	movw	r26, r24
 e9c:	fc 01       	movw	r30, r24
 e9e:	67 2f       	mov	r22, r23
 ea0:	71 91       	ld	r23, Z+
 ea2:	77 23       	and	r23, r23
 ea4:	e1 f7       	brne	.-8      	; 0xe9e <strrev+0x4>
 ea6:	32 97       	sbiw	r30, 0x02	; 2
 ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <strrev+0x18>
 eaa:	7c 91       	ld	r23, X
 eac:	6d 93       	st	X+, r22
 eae:	70 83       	st	Z, r23
 eb0:	62 91       	ld	r22, -Z
 eb2:	ae 17       	cp	r26, r30
 eb4:	bf 07       	cpc	r27, r31
 eb6:	c8 f3       	brcs	.-14     	; 0xeaa <strrev+0x10>
 eb8:	08 95       	ret

00000eba <_exit>:
 eba:	f8 94       	cli

00000ebc <__stop_program>:
 ebc:	ff cf       	rjmp	.-2      	; 0xebc <__stop_program>
